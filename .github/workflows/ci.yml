name: CI
on: [push, pull_request]

jobs:
 test:
    name: Unit test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --no-restore --no-build --configuration Release

 update-version:
    needs: [test]
    name: Update version
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    outputs:
      label: ${{steps.VERSION.outputs.label}}
      semver: ${{steps.VERSION.outputs.semver}}
      nuget: ${{steps.VERSION.outputs.nuget}}
      applicable: ${{steps.VERSION.outputs.applicable}}
      
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup GitVersion
        run: dotnet tool install --global GitVersion.Tool --version 5.6.6

      - name: Fetch git tags
        run: git fetch --tags --unshallow

      - name: Update version
        run: dotnet-gitversion /updateprojectfiles /updateassemblyinfo /output buildserver

      - name: Set job output
        id: VERSION
        run: |
          echo '::set-output name=label::${{env.GitVersion_PreReleaseLabel}}'
          echo '::set-output name=semver::${{env.GitVersion_LegacySemVer}}'
          echo '::set-output name=nuget::${{env.GitVersion_NuGetPreReleaseTagV2}}'
          echo '::set-output name=applicable::${{env.GitVersion_PreReleaseLabel == 'alpha' || env.GitVersion_PreReleaseLabel == 'beta' }}'

      - name: Commit version changes
        if: ${{ steps.VERSION.outputs.applicable == 'true' || steps.extract_branch.outputs.branch == 'main' }}
        uses: EndBug/add-and-commit@v6.2.0
        with:
          author_name: github-actions[bot]
          author_email: github-actions[bot]@users.noreply.github.com
          message: "Bumped version to ${{env.GitVersion_LegacySemVer}}"

 build:
    name: Publish
    needs: [update-version]
    if: ${{ needs.update-version.outputs.applicable == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract_branch.outputs.branch }}

      - name: Clean solution
        run: dotnet clean

      - name: Restore solution
        run: dotnet restore
 
      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Pack solution
        run: dotnet pack --configuration Release --no-restore --no-build --output .
         
      - name: Get all files
        id: files
        run: |
         echo ::set-output name=ALL_FILES::$(ls)
         
      - name: Get package name
        uses: actions-ecosystem/action-regex-match@v2
        id: package
        with:
         text: ${{ steps.files.outputs.ALL_FILES }}
         regex: '([^ ]*)\.[0-9]\.[0-9]\.[0-9](?:(?:(?:-alpha)|(?:-beta))[0-9]{4,})?'  
     
      - name: Publish solution to NuGet
        run: dotnet nuget push *.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{secrets.NUGET_KEY}} --skip-duplicate
         
      - name: Unlist earlier prerelease packages
        uses: darenm/unlist-nuget@v1
        with:
          NUGET_PACKAGE: ${{ steps.package.outputs.group1 }}
          VERSION_REGEX: ".*${{needs.update-version.outputs.label}}.*"
          NUGET_KEY: ${{secrets.NUGET_KEY}}
